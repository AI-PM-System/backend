name: Build, Test and Deploy

on:
  push:
    branches:
      - main
env:
  JDBC_DATABASE_URL: ${{ secrets.JDBC_DATABASE_URL }}
  JDBC_USERNAME: ${{ secrets.JDBC_USERNAME }}
  JDBC_PASSWORD: ${{ secrets.JDBC_PASSWORD }}
  DEFAULT_USER_NAME: ${{ secrets.DEFAULT_USER_NAME }}
  DEFAULT_USER_PASS: ${{ secrets.DEFAULT_USER_PASS }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
  JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
  JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
  JWT_MAX_TOKEN_LENGTH: ${{ secrets.JWT_MAX_TOKEN_LENGTH }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  OPENAI_MAX_DAILY_REQUESTS: ${{ secrets.OPENAI_MAX_DAILY_REQUESTS }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build with maven
      uses: actions/setup-java@v1
      with:
        java-version: 17

    - name: Build project
      run: |
        mvn -B -DskipTests clean install
  test:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17

    - name: Run tests
      run: |
        mvn test
  deploy:
    runs-on: ubuntu-22.04
    
    needs: [build, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and save Docker image
        run: |
          docker build -t ${{ secrets.IMAGE_NAME }} \
            --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL \
            --build-arg JDBC_USERNAME=$JDBC_USERNAME \
            --build-arg JDBC_PASSWORD=$JDBC_PASSWORD \
            --build-arg DEFAULT_USER_NAME=$DEFAULT_USER_NAME \
            --build-arg DEFAULT_USER_PASS=$DEFAULT_USER_PASS \
            --build-arg JWT_SECRET=$JWT_SECRET \
            --build-arg JWT_EXPIRATION=$JWT_EXPIRATION \
            --build-arg JWT_ISSUER=$JWT_ISSUER \
            --build-arg JWT_AUDIENCE=$JWT_AUDIENCE \
            --build-arg JWT_MAX_TOKEN_LENGTH=$JWT_MAX_TOKEN_LENGTH \
            --build-arg OPENAI_API_KEY=$OPENAI_API_KEY \
            --build-arg OPENAI_MAX_DAILY_REQUESTS=$OPENAI_MAX_DAILY_REQUESTS \
            .
          docker save ${{ secrets.IMAGE_NAME }} > "${{ secrets.IMAGE_NAME }}.tar"

      - name: Upload image artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ secrets.IMAGE_NAME }}
          path: "${{ secrets.IMAGE_NAME }}.tar"

      - name: Copy Docker Image to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "${{ secrets.IMAGE_NAME }}.tar"
          target: /root/containers/

      - name: Start new container using the new image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop ${{ secrets.IMAGE_NAME }}
            docker rm ${{ secrets.IMAGE_NAME }}
            docker load < "/root/containers/${{ secrets.IMAGE_NAME }}.tar"
            docker run -d --name ${{ secrets.IMAGE_NAME }} -p 8080:8080 ${{ secrets.IMAGE_NAME }}
            exit